/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studio;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JLabel;

import java.awt.Font;
import java.awt.Color;

import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.JPasswordField;
import javax.swing.JButton;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.sql.DriverManager;
import java.sql.*;
import java.util.*;
import java.math.BigDecimal;
import javax.swing.ComboBoxModel;

import studio.ClientDAo;
import studio.ClientTableModel;
import studio.AddClientDialog;
/**
 *
 * @author Danny
 */
public class Clients extends javax.swing.JFrame {
    private Connection conn;
    private Statement st;
    private ResultSet rs;
    
    private int ClientsID;
    private String ClientName;
    private String ClientNature;
    private int Payable;
    private BigDecimal Amount;
    private String ProjectProgress;
    private String StaffAssigned;
    private String Equipment;
    
    private ClientDAo clientdao;
    /**
     * Creates new form Clients
     */
    public Clients(int ClientsID,String ClientName,String ClientNature,int Payable,BigDecimal Amount,String ProjectProgress, String StaffAssigned, String Equipment){
     super();
     try{
            clientdao=new ClientDAo();
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(this,"Error:" +ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
     this.ClientsID=ClientsID;
     this.ClientName=ClientName;
     this.ClientNature=ClientNature;
     this.Payable=Payable;
     this.Amount=Amount;
     this.StaffAssigned=StaffAssigned;
     this.Equipment=Equipment;
    }

    Clients(String ClientName, ComboBoxModel ClientNature, BigDecimal Amount, ComboBoxModel ProjectProgress, String StaffAssigned, ComboBoxModel Equipment) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
   
    	public int getId() {
		return ClientsID;
	}

	public void setId(int id) {
		this.ClientsID = id;
	}

	public String getClientName() {
		return ClientName;
	}

	public void setClientName(String ClientName) {
		this.ClientName = ClientName;
	}

	public String getClientNature() {
		return ClientNature;
	}

	public void setClientNature(String ClientNature) {
		this.ClientNature = ClientNature;
	}

	public int getPayable() {
		return Payable;
	}

	public void setPayable(int Payable) {
		this.Payable = Payable;
	}

	public BigDecimal getAmount() {
		return Amount;
	}

	public void setAmount(BigDecimal Amount) {
		this.Amount = Amount;
	}
        public String getProjectProgress() {
		return ProjectProgress;
	}

	public void setProjectProgress(String ProjectProgress) {
		this.ProjectProgress = ProjectProgress;
	}
        public String getStaffAssigned() {
		return StaffAssigned;
	}

	public void setStaffAssigned(String StaffAssigned) {
		this.StaffAssigned = StaffAssigned;
	}
        public String getEquipment() {
		return Equipment;
	}

	public void setEquipment(String Equipment) {
		this.Equipment = Equipment;
	}

	@Override
	public String toString() {
		return String
				.format("Clients [id=%s, ClientName=%s, ClinetNature=%s, Payable=%s, Amount=%s,ProjectProgress=%s,StaffAssigned=%s,Equipment=%s ]",
						ClientsID, ClientName, ClientNature, Payable, Amount, ProjectProgress, StaffAssigned, Equipment);
	}
        {
        initComponents();
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        ClientSearchLabel = new javax.swing.JLabel();
        SearchField = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ClientsTable = new javax.swing.JTable();
        AddRecord = new javax.swing.JButton();
        UpdateRecord = new javax.swing.JButton();
        DeleteRecord = new javax.swing.JButton();
        HistoryButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jInternalFrame1.setClosable(true);
        jInternalFrame1.setIconifiable(true);
        jInternalFrame1.setMaximizable(true);
        jInternalFrame1.setResizable(true);
        jInternalFrame1.setTitle("Clients Records");
        jInternalFrame1.setVisible(true);

        ClientSearchLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        ClientSearchLabel.setText("Enter Clients name to search:");

        Search.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(ClientSearchLabel)
                .addGap(18, 18, 18)
                .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Search)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(SearchField, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                    .addComponent(ClientSearchLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Search, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jScrollPane1.setAutoscrolls(true);

        ClientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Client Name", "Client Nature", "Payable", "Amount", "Progress", "Staff Assigned", "Equipment"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Long.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ClientsTable);

        AddRecord.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        AddRecord.setText("ADD");
        AddRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddRecordActionPerformed(evt);
            }
        });

        UpdateRecord.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        UpdateRecord.setText("Upate");
        UpdateRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateRecordActionPerformed(evt);
            }
        });

        DeleteRecord.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        DeleteRecord.setText("DELETE");
        DeleteRecord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteRecordActionPerformed(evt);
            }
        });

        HistoryButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        HistoryButton.setText("View History");
        HistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistoryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(DeleteRecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(UpdateRecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(AddRecord, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(HistoryButton))
                        .addGap(0, 57, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jInternalFrame1Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jInternalFrame1Layout.createSequentialGroup()
                        .addComponent(AddRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(UpdateRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DeleteRecord, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(HistoryButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jInternalFrame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AddRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddRecordActionPerformed
        //create dialog
        AddClientDialog dialog = new AddClientDialog(Clients.this, clientdao);
        //show dialog
        dialog.setVisible(true);
    }//GEN-LAST:event_AddRecordActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
       try{
           String ClientName = SearchField.getText();
           List<Clients> clients = null;
           
           if(ClientName!=null && ClientName.trim().length()>0){
               clients = clientdao.SearchClients(ClientName);
           }
           else{
               clients = clientdao.getAllClients();
           }
           //Create the table and update the model
           ClientTableModel model= new ClientTableModel(clients);
            table.setModel(model);
       }
       catch(Exception ex){
           JOptionPane.showMessageDialog(Clients.this,"Error: "+ ex,"Error", JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_SearchActionPerformed

    private void UpdateRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateRecordActionPerformed
        //get the selected record
        int row = table.getSelectedRow();
        //make sure the row is selected
        if(row<0){
            JOptionPane.showMessageDialog(Clients.this,"You must select a Client.","Error:",JOptionPane.ERROR_MESSAGE);
            return;
        }
        //get the current client
        Clients tempClient = (Clients) table.getValueAt(row, ClientTableModel.OBJECT_COL);
        //create dialog
        AddClientDialog dialog = new AddClientDialog(Clients.this,clientdao,tempClient,true);
        //show dialog
        dialog.setVisible(true);
    }//GEN-LAST:event_UpdateRecordActionPerformed

    private void DeleteRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteRecordActionPerformed
       try{
           //get selected row
           int row = table.selectedRow();
           //make sure a row is selected
           if(row<0){
               JOptionPane.showMessageDialog(Clients.this,"You must select a Client to delete.","Error:",JOptionPane.ERROR_MESSAGE);
               return;
           }
           //prompt the user
           int response = JOptionPane.showConfirmDialog(Clients.this,"Do you want to delete this client?","Confirm",
                   JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
           if(response != JOptionPane.YES_OPTION){
               return;
           }
           //get the current client
           Clients tempClient = (Clients) table.getValueAt(row,ClientTableModel.OBJECT_COL);   
           //delete the client
           clientdao.deleteClient(tempClient.getId());
           //refresh GUI
           refreshClientsView();
           //show success message
           JOptionPane.showMessageDialog(Clients.this,"Client was deleted successfully,","Client deleted",JOptionPane.INFORMATION_MESSAGE);
       }
       catch(Exception ex){
           JOptionPane.showMessageDialog(Clients.this,"Error deleting client:"+ex.getMessage(),"Error",JOptionPane.ERROR_MESSAGE);
       }
    }//GEN-LAST:event_DeleteRecordActionPerformed

    private void HistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistoryButtonActionPerformed
        //get the selected staff
        int row = table.getSelectedRow(); 
        //make sure row is selected
        if(row<0){
            JOptionPane.showMessageDialog(Clients.this,"You must select a record to view","Error",JOptionPane.ERROR_MESSAGE);
            return;
        }
        // get the current staff
        Clients tempClients= (Clients) table.getValueAt(row,ClientTableModel.OBJECT_COL);
        try{
           //get the history for the client
            int clientId = tempClients.getId();
            List<AuditHistory> auditHistoryList = clientdao.getAuditHistory(clientId);
            //show audit history dialog
            ClientAuditHistory dialog = new ClientAuditHistory();
            dialog.populate(tempClients, auditHistoryList);
            
            dialog.setVisible(true);
        }
        catch(Exception ex){
               ex.printStackTrace();
               JOptionPane.showMessageDialog(Clients.this,"Error retieving audit history.","Error",JOptionPane.ERROR_MESSAGE);
               return;
           }
    }//GEN-LAST:event_HistoryButtonActionPerformed
    public void refreshClientsView(){
        try{
            List<Clients> clients=  clientdao.getAllClients();
            
            //create the model and update the table
            ClientTableModel model = new ClientTableModel(clients);
            table.setModel(model);
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(this, "Error:" +ex, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Clients.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        String dburl="jdbbc:mysql://localhost/3306/studio";
        String user= "root";
        String password= "";
        try{
            //get connection to database
            Connection conn = DriverManager.getConnection(dburl,user,password);
            //Create statement
            Statement st= conn.createStatement();
            //Execute sql query
            String sql="Insert into clients" 
                    +"(ClientName,ClientNature,Payable,Amount,ProjectProgress,StaffAssigned,Equipment)"
                    +"values (?,?,?,?,?,?,?)";
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(null,ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Clients().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddRecord;
    private javax.swing.JLabel ClientSearchLabel;
    private javax.swing.JTable ClientsTable;
    private javax.swing.JButton DeleteRecord;
    private javax.swing.JButton HistoryButton;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchField;
    private javax.swing.JButton UpdateRecord;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
